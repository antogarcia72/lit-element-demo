{"version":3,"file":"lit-element.demo.js","sourceRoot":"","sources":["../../src/lit-element.demo.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,KAAK,CAAC;AAC5C,OAAO,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAE5D;;;;;;GAMG;AAEH,IAAa,cAAc,GAA3B,MAAa,cAAe,SAAQ,UAAU;IAA9C;;QAiBE;;WAEG;QAEH,SAAI,GAAG,OAAO,CAAC;QAEf;;WAEG;QAEH,UAAK,GAAG,CAAC,CAAC;IA4BZ,CAAC;IAtDC,mCAAmC;IACnC,iDAAiD;IACjD,IAAI;IACJ,MAAM,KAAK,MAAM;QACf,OAAO,GAAG,CAAA;;;;;;;;;KAST,CAAC;IACJ,CAAC;IAcQ,MAAM;QACb,OAAO,IAAI,CAAA;;cAED,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC;yBACb,IAAI,CAAC,QAAQ;yBACb,IAAI,CAAC,KAAK;;;;KAI9B,CAAC;IACJ,CAAC;IAEO,QAAQ;QACd,IAAI,CAAC,KAAK,EAAE,CAAC;QACb,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;QAC3B,IAAI,CAAC,aAAa,CAChB,IAAI,WAAW,CAAC,eAAe,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,KAAK,EAAE,CAAC,CACzD,CAAC;IACJ,CAAC;IACD;;;OAGG;IACH,QAAQ,CAAC,IAAY;QACnB,OAAO,UAAU,IAAI,EAAE,CAAC;IAC1B,CAAC;CACF,CAAA;AAlCC;IADC,QAAQ,EAAE;4CACI;AAMf;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;6CACjB;AA3BC,cAAc;IAD1B,aAAa,CAAC,kBAAkB,CAAC;GACrB,cAAc,CAuD1B;SAvDY,cAAc","sourcesContent":["import { LitElement, html, css } from \"lit\";\r\nimport { customElement, property } from \"lit/decorators.js\";\r\n\r\n/**\r\n * An example element.\r\n *\r\n * @fires count-changed - Indicates when the count changes\r\n * @slot - This element has a slot\r\n * @csspart button - The button\r\n */\r\n@customElement(\"lit-element-demo\")\r\nexport class LitElementDemo extends LitElement {\r\n  // static get styles(): CSSResult {\r\n  //   return lit-this.elementProperties.demo.scss;\r\n  // }\r\n  static get styles() {\r\n    return css`\r\n      :host {\r\n        --demo-background-color: green;\r\n        display: block;\r\n        border: solid 1px gray;\r\n        padding: 16px;\r\n        max-width: 800px;\r\n        background-color: var(--themeColor);\r\n      }\r\n    `;\r\n  }\r\n\r\n  /**\r\n   * The name to say \"Hello\" to.\r\n   */\r\n  @property()\r\n  name = \"World\";\r\n\r\n  /**\r\n   * The number of times the button has been clicked.\r\n   */\r\n  @property({ type: Number })\r\n  count = 0;\r\n\r\n  override render() {\r\n    return html`\r\n      <div class=\"demo\">\r\n        <h1>${this.sayHello(this.name)}!</h1>\r\n        <button @click=${this._onClick} part=\"button\">\r\n          Click Count: ${this.count}\r\n        </button>\r\n        <slot></slot>\r\n      </div>\r\n    `;\r\n  }\r\n\r\n  private _onClick() {\r\n    this.count++;\r\n    console.log(\"Event fired\");\r\n    this.dispatchEvent(\r\n      new CustomEvent(\"count-changed\", { detail: this.count })\r\n    );\r\n  }\r\n  /**\r\n   * Formats a greeting\r\n   * @param name The name to say \"Hello\" to\r\n   */\r\n  sayHello(name: string): string {\r\n    return `Hello, ${name}`;\r\n  }\r\n}\r\n\r\ndeclare global {\r\n  interface HTMLElementTagNameMap {\r\n    \"lit-element-demo\": LitElementDemo;\r\n  }\r\n}\r\n"]}